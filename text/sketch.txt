const { Engine, Render, Runner, World, Bodies, Body, Events } = Matter;

var canvas, engine, world;
var snookerTable, balls = [], cue, cueBall;

function setup() {
  // Framerate limit and canvas
  frameRate(60);
  canvas = createCanvas(1000, 600);

  // Initialize engine
  engine = Engine.create();
  world = engine.world;

  // Gravity 0 at y axis as it is top view game
  engine.gravity.y = 0;

  // Create snooker table
  snookerTable = new SnookerTable({
    tableWidth: 800,
    tableOffsetX: 100,
    tableOffsetY: 150,
    colors: {
      tableMat: "#009A17",
      innerBorder: "#004C54",
      pocket: "black",
      line: "white",
      outerBorder: "#964e02",
    },
  });

  // Create balls
  Ball.initializeBalls(
    snookerTable.tableWidth,
    snookerTable.tableHeight,
    snookerTable.tableOffsetX,
    snookerTable.tableOffsetY,
    snookerTable.baulkLineX,
    snookerTable.dRadius
  );

  // Separate cueBall from balls
  cueBall = balls.find(ball => ball.body.label === "cueBall").body;

  // Create cue
  cue = new Cue(cueBall);

  // CueBall speed adjustment
  speedSlider = createSlider(1, 20, 10);
  speedSlider.position(20, 20);
  speedSlider.style('width', '200px');

  Matter.Events.on(engine, 'collisionStart', handlePocketCollision);
  Matter.Runner.run(engine);
}

function draw() {
  const mousePos = { x: mouseX, y: mouseY };

  background("#154734");

  // Draw snookertable
  snookerTable.draw();

  // Draw balls
  balls.forEach((ball) => ball.draw());

  // Draw cue only when ball is at rest
  // Also projectile from cueBall
  const velocityMagnitude = Math.sqrt(
    cueBall.velocity.x ** 2 + cueBall.velocity.y ** 2
  );

  if (velocityMagnitude <= 0.009) {
    cue.drawCue(mousePos);
    cue.update();
  }
}